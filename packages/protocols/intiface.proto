syntax = "proto3";
package IntifaceProtocols;

// This needs to stay in sync with the Buttplug Server CLI protocols.
message DeviceMessageAttrs {
    map<string, string> msgs_attrs = 1;
}

// This needs to stay in sync with the Buttplug Server CLI protocols.
message ServerControlMessage {
  message Stop {
  };

  message AddSimulatedDevice {
    string device_ident = 1;
    string device_name = 2;
    map<string, DeviceMessageAttrs> device_msgs = 3;
  }

  message RemoveSimulatedDevice {
    string device_ident = 1;
  }

  message SimulatedDeviceMsgIn {
    string device_ident = 1;
    string json_msg = 2;
  }

  oneof msg {
    Stop stop = 1;
    AddSimulatedDevice add_simulated_device = 2;
    RemoveSimulatedDevice remove_simulated_device = 3;
    SimulatedDeviceMsgIn simulated_device_msg_in = 4;
  }
}

// This needs to stay in sync with the Buttplug Server CLI protocols.
message ServerProcessMessage {
  // Status messages from the server process
  message ProcessLog {
    string message = 1;
  };

  // Notifies frontend that server process is up and running
  message ProcessStarted {
  };

  // Notifies frontend that the server process errored out
  message ProcessError {
    string message = 1;
  };
  
  // Notifies frontend that server process has ended
  message ProcessEnded {
  };

  // Buttplug protocol log message from server process
  message ButtplugLog {
    string message = 1;
  };

  // Notification that a client has connected to the server process
  message ClientConnected {
    string client_name = 1;
  };

  // Notification that a client has disconnected from the server
  // process.
  message ClientDisconnected {
  };

  // Notification that the server has connected to a device.
  message DeviceConnected {
    string device_name = 1;
    uint32 device_id = 2;
  };

  // Notification that the server has disconnected from a device.
  message DeviceDisconnected {
    uint32 device_id = 1;
  };
  
  message SimulatedDeviceMsgOut {
    string device_ident = 1;
    string json_msg = 2;
  }
  
  oneof msg {
    ProcessStarted process_started = 1;
    ProcessError process_error = 2;
    ProcessEnded process_ended = 3;
    ProcessLog process_log = 4;
    ButtplugLog buttplug_log = 5;
    ClientConnected client_connected = 6;
    ClientDisconnected client_disconnected = 7;
    DeviceConnected device_connected = 8;
    DeviceDisconnected device_disconnected = 9;
    SimulatedDeviceMsgOut simulated_device_msg_out = 10;
  };
}

// Messages that go from parent process to child interface/gui.
message IntifaceBackendMessage {

  // Message Index, for matching paired frontend/backend messages.
  uint32 index = 1;

  message Ok {
  };

  message Error {
    string reason = 1;
  };
  
  // Sends full configuration file to the child process, usually on
  // startup to seed initial config information.
  message Configuration {
    string configuration = 1;
  };

  message UpdatesAvailable {
    bool application = 1;
    bool device_file = 2;
    bool engine = 3;
  };

  message DownloadProgress {
    uint32 bytes_received = 1;
    uint32 bytes_total = 2;
    string error = 3;
  };

  message CertificateGenerated {
  }
  
  message CertificateAcceptanceServerRunning {
    uint32 insecure_port = 1;
  };

  // JSON block representing a js object for winston, for display in
  // the Frontend
  message LogMessage {
    string info = 1;
  };

  oneof msg {
    Ok ok = 2;
    Error error = 3;
    Configuration configuration = 4;
    UpdatesAvailable updates_available = 5;
    DownloadProgress download_progress = 6;
    CertificateAcceptanceServerRunning certificate_acceptance_server_running = 7;
    CertificateGenerated certificate_generated = 8;
    ServerProcessMessage server_process_message = 9;
    LogMessage log_message = 10;
  };
};

// Messages that go from child interface/gui to parent process.
message IntifaceFrontendMessage {

  // Message Index, for matching paired frontend/backend messages.
  uint32 index = 1;

  message Ok {
  };

  message Error {
    string reason = 1;
  };
  
  // Sent from frontend to backend when frontend is considered to be
  // up and running. Will cause backend to respond by sending
  // configuration.
  message Ready {
  };
  
  // Requests server start a new process.
  message StartProcess {
  };

  // Requests server stop current process.
  message StopProcess {
  };
  
  // Requests server starts listening on Buttplug proxy ports.
  message StartProxy {
  };

  // Requests server stops listening on Buttplug proxy ports.
  message StopProxy {
  };

  // Sends full configuration file to parent process, on each change,
  // in order for it to be saved to disk.
  message UpdateConfig {
    string configuration = 1;
  };

  message CheckForUpdates {
  };

  message UpdateEngine {
  };

  message UpdateDeviceFile {
  };

  message UpdateApplication {
  };

  message GenerateCertificate {
  };

  message RunCertificateAcceptanceServer {
  };

  message StopCertificateAcceptanceServer {
  };

  // JSON block representing a js object for winston, to record in the
  // backend.
  message LogMessage {
    string info = 1;
  };

  message CancelUpdate {
  };

  oneof msg {
    Ok ok = 2;
    Error error = 3;
    Ready ready = 4;
    StartProcess start_process = 5;
    StopProcess stop_process = 6;
    StartProxy start_proxy = 7;
    StopProxy stop_proxy = 8;
    UpdateConfig update_config = 9;
    CheckForUpdates check_for_updates = 10;
    UpdateEngine update_engine = 11;
    UpdateDeviceFile update_device_file = 12;
    UpdateApplication update_application = 13;
    GenerateCertificate generate_certificate = 14;
    RunCertificateAcceptanceServer run_certificate_acceptance_server = 15;
    StopCertificateAcceptanceServer stop_certificate_acceptance_server = 16;
    LogMessage log_message = 17;
    CancelUpdate cancel_update = 18;
    ServerControlMessage server_control_message = 19;
  };
};
